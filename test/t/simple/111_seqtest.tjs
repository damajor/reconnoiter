name = "sequence test"
plan = 6
requires = ['prereq']

'use strict';
var tools = require('./testconfig'),
    nc = require('../../src/js/index'),
    fs = require('fs'),
    async = require('async');

var noit, conn;

function check_check(uuid, cb) {
  conn.request({path: '/checks/show/' + uuid + '.json'}, cb);
}

function put_check(uuid, seq, cb) {
  conn.request({path: '/checks/set/' + uuid, method: 'PUT' },
    '<?xml version="1.0" encoding="utf8"?>' +
    '<check>' +
    '<attributes>' +
    '  <seq>'+seq+'</seq>' +
    '  <target>127.0.0.1</target>' +
    '  <target>127.0.0.1</target>' +
    '  <period>1000</period>' +
    '  <timeout>500</timeout>' +
    '  <name>selfcheck</name>' +
    '  <filterset>allowall</filterset>' +
    '  <module>selfcheck</module>' +
    '</attributes>' +
    '<config/>' +
    '</check>',
    cb);
}

test = function() {
  var test = this;
  noit = new tools.noit(test, "111", { 'logs_debug': { '': 'false' } });
  conn = noit.get_connection();
  noit.start(function(pid, port) {
    test.is(port, noit.get_api_port(), 'API port matches');
    async.series([
      function(callback) {
        check_check('e2babc9a-e5ee-11e4-9a15-7cd1c3dcddf7', function(code, data) {
          test.is(code, 404, 'show check absent');
          callback();
        })
      },
      function(callback) {
        put_check('e2babc9a-e5ee-11e4-9a15-7cd1c3dcddf7', 11, function(code, data) {
          test.is(code, 200, 'put check seq:11 succeeds');
          callback();
        })
      },
      function(callback) {
        put_check('e2babc9a-e5ee-11e4-9a15-7cd1c3dcddf7', 10, function(code, data) {
          test.is(code, 500, 'put check seq:10 fails');
          callback();
        })
      },
      function(callback) { noit.stop(); callback(); },
    ]);
  });
}
